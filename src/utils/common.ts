import { Contract, providers, Wallet } from "ethers"
import address from "../utils/address.json"
import safeDeployerABI from './abi/safeDeployer.json'


if (!process.env.ETH_WS_RPC ||
    !process.env.WALLET_ADDRESS) {
    throw new Error("ETH_WS_RPC or WALLET_ADDRESS not provided in .env")
}


export const walletAddress = process.env.WALLET_ADDRESS!


// providers
export const ethProvider = new providers.WebSocketProvider(process.env.ETH_WS_RPC!)
export const bscProvider = new providers.WebSocketProvider(process.env.BSC_WS_RPC!)

const signer = new Wallet(process.env.PRIVATE_KEY!)

// Account on both chains
export const ethAccount = signer.connect(ethProvider)
export const bscAccount = signer.connect(bscProvider)


export const getEthNonce = async (walletAddress: string) => {
    try {
        return await ethProvider.getTransactionCount(walletAddress)
    } catch (error) {
        console.log("Error fetching nonce ", error)
    }
}

export const getBscNonce = async (walletAddress: string) => {
    try {
        return await bscProvider.getTransactionCount(walletAddress)
    } catch (error) {
        console.log("Error fetching nonce ", error)
    }
}

export const wait = async (ms: number) => {
    console.log(`\n Waiting for ${ms / 1000} seconds`)
    return new Promise((resolve) => setTimeout(resolve, ms));
};

export const deploySafe = async () => {
    try {

        console.log("Nonce ", await getBscNonce(address.bscSafeDeployer))
        const deployerContract = new Contract(address.bscSafeDeployer, safeDeployerABI, bscAccount)

        const tx = await deployerContract.deploy()

        const transaction = await tx.wait();
        const safe = await newSafeListener(transaction)

        console.log("New Safe Deployed : ", safe);

        return safe

    } catch (error) {
        console.log("Error creating safe ", error)
    }
}


export const newSafeListener = async (transaction: any) => {
    try {
        const event = transaction.events.find((event: any) => event.event === 'NewSafe');
        const [safe] = event.args;

        return safe
    } catch (error) {
        console.log("Error getting contract event ", error)
    }

}

