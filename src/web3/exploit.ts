import { Wallet } from "ethers"
import { ethers } from "hardhat"
import { getEthNonce, getBscNonce } from "../utils"

/**
 * 
 * @param safeDeployerAddress the address of the safe deployer on the bsc chain
 * @param ethSafeDeployerAddress the nonce of the safe deployer on eth chain when the safe was initially deployed
 */
export const checkNonce = async (safeDeployerAddress: string, ethSafeDeployerAddress: number): Promise<Boolean | undefined> => {
    try {

        // Get nonce of deployer on bsc chain
        let currentSafeNonce = await getBscNonce(safeDeployerAddress)

        if (currentSafeNonce) {

            if (currentSafeNonce == ethSafeDeployerAddress) {
                console.log("Safe already deployed, exploit initialised")
                return true
            } else {
                console.log(`Still have ${ethSafeDeployerAddress - currentSafeNonce} steps to go `)
            }
        }

        return false

    } catch (error) {
        console.log("Error verifying nonce ", error)
    }

    // if (currentNonce)
}

export const deploySafe = async (contractName: string) => {
    try {
        const factory = await ethers.getContractFactory(contractName)
        const contract = await factory.deploy()

        await contract.deployed()

        console.log("New Safe Address ", contract.address)

        return contract.address
    } catch (error) {
        console.log("Error deploying safe ", error)
    }
}